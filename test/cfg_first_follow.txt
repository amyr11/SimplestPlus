---
CFG
---
1. <program>             ->  <global> home ( ) : <newline> <code_block> <global>
2. <global>              ->  <frozen_var> <data_type> id = <value> <newline> <next_global>
3. <global>              ->  <function> <next_global>
4. <global>              ->  <group> <next_global>
5. <global>              ->  λ
6. <next_global>         ->  <global>
7. <next_global>         ->  λ
8. <function>            ->  <return_type> id ( <parameter> ) <newline> <code_block>
9. <method>              ->  <access_specifier> <return_type> id ( <parameter> ) <newline> <code_block>
10. <code_block>         ->  <tab> <statement> <newline> <next_code_block>
11. <next_code_block>    ->  <code_block>
12. <next_code_block>    ->  λ
13. <return_type>        ->  <data_type>
14. <return_type>        ->  empty
15. <data_type>          ->  word <collection_suffix>
16. <data_type>          ->  num <collection_suffix>
17. <data_type>          ->  deci <collection_suffix>
18. <data_type>          ->  choice <collection_suffix>
19. <data_type>          ->  id <collection_suffix>
20. <collection_suffix>  ->  [ ]
21. <collection_suffix>  ->  λ
22. <parameter>          ->  <data_type> id <next_parameter>
23. <parameter>          ->  λ
24. <next_parameter>     ->  , <data_type> id <next_parameter>
25. <next_parameter>     ->  λ
26. <group>              ->  group id <inheritance> : <newline> <group_global> <initializer> <next_group_global>
27. <inheritance>        ->  inherits id
28. <inheritance>        ->  λ
29. <group_global>       ->  <tab> <field> <newline> <next_group_global>
30. <group_global>       ->  <tab> <method> <next_group_global>
31. <next_group_global>  ->  <group_global>
32. <next_group_global>  ->  λ
33. <initializer>        ->  <tab> initialize ( <parameter> ) : <newline> <code_block>
34. <initializer>        ->  λ
35. <field>              ->  <access_specifier> <data_type> id <field_value>
36. <field>              ->  <access_specifier> frozen <data_type> id = <value>
37. <field_value>        ->  = <value>
38. <field_value>        ->  λ
39. <access_specifier>   ->  visible
40. <access_specifier>   ->  hidden
41. <access_specifier>   ->  restricted
42. <expression>         ->  <operand> <next_operand>
43. <expression>         ->  not <expression>
44. <next_operand>       ->  λ
45. <next_operand>       ->  <operator> <expression>
46. <operand>            ->  <function_call>
47. <operand>            ->  - <numeric>
48. <operand>            ->  ( <expression> )
49. <operand>            ->  <variable>
50. <operand>            ->  <numeric>
51. <operand>            ->  word_lit
52. <operand>            ->  yes
53. <operand>            ->  no
54. <numeric>            ->  num_lit
55. <numeric>            ->  deci_lit
56. <operator>           ->  +
57. <operator>           ->  -
58. <operator>           ->  *
59. <operator>           ->  /
60. <operator>           ->  //
61. <operator>           ->  %
62. <operator>           ->  **
63. <operator>           ->  >
64. <operator>           ->  <
65. <operator>           ->  >=
66. <operator>           ->  <=
67. <operator>           ->  ==
68. <operator>           ->  !=
69. <operator>           ->  and
70. <operator>           ->  or
71. <statement>          ->  <frozen_var> <data_type> id = <value>
72. <statement>          ->  <variable> <assign_operator> <value>
73. <statement>          ->  incase <expression> : <newline> <code_block> <unless> <instead>
74. <statement>          ->  given <variable> : <newline> <event> <default>
75. <statement>          ->  every <data_type> id in <iterable> : <newline> <code_block>
76. <statement>          ->  during <expression> : <newline> <code_block>
77. <statement>          ->  go : <newline> <code_block> during <expression>
78. <frozen_var>         ->  frozen
79. <frozen_var>         ->  λ
80. <assign_operator>    ->  =
81. <assign_operator>    ->  +=
82. <assign_operator>    ->  -=
83. <assign_operator>    ->  *=
84. <assign_operator>    ->  /=
85. <assign_operator>    ->  //=
86. <assign_operator>    ->  **=
87. <assign_operator>    ->  %=
88. <unless>             ->  unless <expression> : <newline> <code_block> <next_unless>
89. <unless>             ->  λ
90. <next_unless>        ->  <unless>
91. <next_unless>        ->  λ
92. <instead>            ->  instead : <newline> <code_block>
93. <instead>            ->  λ
94. <default>            ->  default : <newline> <code_block>
95. <default>            ->  λ
96. <event>              ->  event <event_value> : <newline> <code_block> <next_event>
97. <event_value>        ->  word_lit
98. <event_value>        ->  num_lit
99. <event_value>        ->  deci_lit
100. <next_event>        ->  <event>
101. <next_event>        ->  λ
102. <iterable>          ->  <collection_value>
103. <iterable>          ->  <variable>
104. <iterable>          ->  <function_call>
105. <variable>          ->  <normal_variable>
106. <variable>          ->  <object> <next_variable>
107. <normal_variable>   ->  id <next_variable>
108. <next_variable>     ->  . <normal_variable> <next_variable>
109. <next_variable>     ->  λ
110. <object>            ->  parent
111. <object>            ->  self
112. <value>             ->  <expression>
113. <value>             ->  <collection_value>
114. <value>             ->  <wiki_value>
115. <value>             ->  new id ( <argument> )
116. <collection_value>  ->  [ <opt_newline_tab> <value> <next_item> <opt_newline_tab> ]
117. <next_item>         ->  , <opt_newline_tab> <expression> <next_item>
118. <next_item>         ->  λ
119. <wiki_value>        ->  { <opt_newline_tab> <key> : <value> <next_pair> <opt_newline_tab> }
120. <key>               ->  word_lit
121. <key>               ->  <variable>
122. <next_pair>         ->  , <opt_newline_tab> <key> : <expression> <next_pair>
123. <next_pair>         ->  λ
124. <function_call>     ->  id ( <argument> )
125. <function_call>     ->  <variable> . <function_call>
126. <function_call>     ->  <object> . initialize ( <argument> )
127. <function_call>     ->  range ( <argument> )
128. <function_call>     ->  inp ( <argument> )
129. <function_call>     ->  out ( <argument> )
130. <function_call>     ->  word ( <argument> )
131. <function_call>     ->  num ( <argument> )
132. <function_call>     ->  deci ( <argument> )
133. <argument>          ->  <expression> <next_argument>
134. <argument>          ->  λ
135. <next_argument>     ->  , <argument>
136. <next_argument>     ->  λ
137. <newline>           ->  \n <next_newline>
138. <newline>           ->  \0
139. <next_newline>      ->  \n <next_newline>
140. <next_newline>      ->  λ
141. <tab>               ->  \t <next_tab>
142. <next_tab>          ->  <tab>
143. <next_tab>          ->  λ
144. <opt_newline_tab>   ->  \n <tab>
145. <opt_newline_tab>   ->  λ


---------
FIRST SET
---------
1. <program>             ->  {choice, deci, empty, frozen, group, home, id, num, word}
2. <global>              ->  {choice, deci, empty, frozen, group, id, num, word, λ}
3. <next_global>         ->  {choice, deci, empty, frozen, group, id, num, word, λ}
4. <function>            ->  {choice, deci, empty, id, num, word}
5. <method>              ->  {hidden, restricted, visible}
6. <code_block>          ->  {\t}
7. <next_code_block>     ->  {\t, λ}
8. <return_type>         ->  {choice, deci, empty, id, num, word}
9. <data_type>           ->  {choice, deci, id, num, word}
10. <collection_suffix>  ->  {[, λ}
11. <parameter>          ->  {choice, deci, id, num, word, λ}
12. <next_parameter>     ->  {,, λ}
13. <group>              ->  {group}
14. <inheritance>        ->  {inherits, λ}
15. <group_global>       ->  {\t}
16. <next_group_global>  ->  {\t, λ}
17. <initializer>        ->  {\t, λ}
18. <field>              ->  {hidden, restricted, visible}
19. <field_value>        ->  {=, λ}
20. <access_specifier>   ->  {hidden, restricted, visible}
21. <expression>         ->  {(, -, deci, deci_lit, id, inp, no, not, num, num_lit, out, parent, range, self, word, word_lit, yes}
22. <next_operand>       ->  {!=, %, *, **, +, -, /, //, <, <=, ==, >, >=, and, or, λ}
23. <operand>            ->  {(, -, deci, deci_lit, id, inp, no, num, num_lit, out, parent, range, self, word, word_lit, yes}
24. <numeric>            ->  {deci_lit, num_lit}
25. <operator>           ->  {!=, %, *, **, +, -, /, //, <, <=, ==, >, >=, and, or}
26. <statement>          ->  {choice, deci, during, every, frozen, given, go, id, incase, num, parent, self, word}
27. <frozen_var>         ->  {frozen, λ}
28. <assign_operator>    ->  {%=, **=, *=, +=, -=, //=, /=, =}
29. <unless>             ->  {unless, λ}
30. <next_unless>        ->  {unless, λ}
31. <instead>            ->  {instead, λ}
32. <default>            ->  {default, λ}
33. <event>              ->  {event}
34. <event_value>        ->  {deci_lit, num_lit, word_lit}
35. <next_event>         ->  {event, λ}
36. <iterable>           ->  {[, deci, id, inp, num, out, parent, range, self, word}
37. <variable>           ->  {id, parent, self}
38. <normal_variable>    ->  {id}
39. <next_variable>      ->  {., λ}
40. <object>             ->  {parent, self}
41. <value>              ->  {(, -, [, deci, deci_lit, id, inp, new, no, not, num, num_lit, out, parent, range, self, word, word_lit, yes, {}
42. <collection_value>   ->  {[}
43. <next_item>          ->  {,, λ}
44. <wiki_value>         ->  {{}
45. <key>                ->  {id, parent, self, word_lit}
46. <next_pair>          ->  {,, λ}
47. <function_call>      ->  {deci, id, inp, num, out, parent, range, self, word}
48. <argument>           ->  {(, -, deci, deci_lit, id, inp, no, not, num, num_lit, out, parent, range, self, word, word_lit, yes, λ}
49. <next_argument>      ->  {,, λ}
50. <newline>            ->  {\0, \n}
51. <next_newline>       ->  {\n, λ}
52. <tab>                ->  {\t}
53. <next_tab>           ->  {\t, λ}
54. <opt_newline_tab>    ->  {\n, λ}


----------
FOLLOW SET
----------
1. <program>             ->  {}
2. <global>              ->  {home}
3. <next_global>         ->  {home}
4. <function>            ->  {choice, deci, empty, frozen, group, home, id, num, word}
5. <method>              ->  {\t, choice, deci, empty, frozen, group, home, id, num, word}
6. <code_block>          ->  {\0, \n, \t, choice, deci, default, during, empty, event, frozen, group, home, id, instead, num, unless, word}
7. <next_code_block>     ->  {\0, \n, \t, choice, deci, default, during, empty, event, frozen, group, home, id, instead, num, unless, word}
8. <return_type>         ->  {id}
9. <data_type>           ->  {id}
10. <collection_suffix>  ->  {id}
11. <parameter>          ->  {)}
12. <next_parameter>     ->  {)}
13. <group>              ->  {choice, deci, empty, frozen, group, home, id, num, word}
14. <inheritance>        ->  {:}
15. <group_global>       ->  {\t, choice, deci, empty, frozen, group, home, id, num, word}
16. <next_group_global>  ->  {\t, choice, deci, empty, frozen, group, home, id, num, word}
17. <initializer>        ->  {\t, choice, deci, empty, frozen, group, home, id, num, word}
18. <field>              ->  {\0, \n}
19. <field_value>        ->  {\0, \n}
20. <access_specifier>   ->  {choice, deci, empty, frozen, id, num, word}
21. <expression>         ->  {), ,, :, \0, \n, ], }}
22. <next_operand>       ->  {), ,, :, \0, \n, ], }}
23. <operand>            ->  {!=, %, ), *, **, +, ,, -, /, //, :, <, <=, ==, >, >=, \0, \n, ], and, or, }}
24. <numeric>            ->  {!=, %, ), *, **, +, ,, -, /, //, :, <, <=, ==, >, >=, \0, \n, ], and, or, }}
25. <operator>           ->  {(, -, deci, deci_lit, id, inp, no, not, num, num_lit, out, parent, range, self, word, word_lit, yes}
26. <statement>          ->  {\0, \n}
27. <frozen_var>         ->  {choice, deci, id, num, word}
28. <assign_operator>    ->  {(, -, [, deci, deci_lit, id, inp, new, no, not, num, num_lit, out, parent, range, self, word, word_lit, yes, {}
29. <unless>             ->  {\0, \n, instead}
30. <next_unless>        ->  {\0, \n, instead}
31. <instead>            ->  {\0, \n}
32. <default>            ->  {\0, \n}
33. <event>              ->  {\0, \n, default}
34. <event_value>        ->  {:}
35. <next_event>         ->  {\0, \n, default}
36. <iterable>           ->  {:}
37. <variable>           ->  {!=, %, %=, ), *, **, **=, *=, +, +=, ,, -, -=, ., /, //, //=, /=, :, <, <=, =, ==, >, >=, \0, \n, ], and, or, }}
38. <normal_variable>    ->  {!=, %, %=, ), *, **, **=, *=, +, +=, ,, -, -=, ., /, //, //=, /=, :, <, <=, =, ==, >, >=, \0, \n, ], and, or, }}
39. <next_variable>      ->  {!=, %, %=, ), *, **, **=, *=, +, +=, ,, -, -=, ., /, //, //=, /=, :, <, <=, =, ==, >, >=, \0, \n, ], and, or, }}
40. <object>             ->  {!=, %, %=, ), *, **, **=, *=, +, +=, ,, -, -=, ., /, //, //=, /=, :, <, <=, =, ==, >, >=, \0, \n, ], and, or, }}
41. <value>              ->  {,, \0, \n, ], }}
42. <collection_value>   ->  {,, :, \0, \n, ], }}
43. <next_item>          ->  {\n, ]}
44. <wiki_value>         ->  {,, \0, \n, ], }}
45. <key>                ->  {:}
46. <next_pair>          ->  {\n, }}
47. <function_call>      ->  {!=, %, ), *, **, +, ,, -, /, //, :, <, <=, ==, >, >=, \0, \n, ], and, or, }}
48. <argument>           ->  {)}
49. <next_argument>      ->  {)}
50. <newline>            ->  {\0, \n, \t, choice, deci, default, during, empty, event, frozen, group, home, id, instead, num, unless, word}
51. <next_newline>       ->  {\0, \n, \t, choice, deci, default, during, empty, event, frozen, group, home, id, instead, num, unless, word}
52. <tab>                ->  {(, -, [, choice, deci, deci_lit, during, every, frozen, given, go, hidden, id, incase, initialize, inp, new, no, not, num, num_lit, out, parent, range, restricted, self, visible, word, word_lit, yes, {}
53. <next_tab>           ->  {(, -, [, choice, deci, deci_lit, during, every, frozen, given, go, hidden, id, incase, initialize, inp, new, no, not, num, num_lit, out, parent, range, restricted, self, visible, word, word_lit, yes, {}
54. <opt_newline_tab>    ->  {(, -, [, deci, deci_lit, id, inp, new, no, not, num, num_lit, out, parent, range, self, word, word_lit, yes, {}
