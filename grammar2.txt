'''
! Rules revision:
    - can add default value (expression) to parameter using ASSIGN after ID
        - if using default value, the parameter must come after other parameters without default value

Notes:
    - single-block statements is required to end on NEWLINE+ unless the next token is EOF
    - multi-block statements don't end on NEWLINE+ because they will always contain a single-block statements that have a NEWLINE+ at the end
    - the end of a function body or group body is determined if the number of TAB in a statements is less than that of the previous statements

Legend:
    s   -> non-terminals (lowercase)
    S   -> terminals (uppercase)
    |   -> or
    ()  -> groups terminals and non-terminals together
    *   -> 0 or more
    +   -> 1 or more
    ?   -> optional
'''

##############################################################################################################################################

[ ] program             : NEWLINE* global* HOME OPAR CPAR COLON NEWLINE+ statements global* NEWLINE*

[ ] global              : init-stmt
                        : func-def
                        : group-def

[ ] func-def            : return-type ID func-params COLON NEWLINE+ statements

[ ] group-def           : GROUP ID COLON NEWLINE+ group-body

[ ] data-type           : (NUM|DECI|WORD|LETTER|CHOICE|WIKI|ID) (OBRACK CBRACK)*

[ ] return-type         : EMPTY|data-type

[ ] func-args           : OPAR (expression (COMMA expression)*)? CPAR

[ ] func-params         : OPAR (data-type ID (ASSIGN expression)? (COMMA data-type ID (ASSIGN expression)?)*)? CPAR

[ ] group-body          : group-initializer (group-global)*
                        : group-global+ (group-initializer group-global*)?
                    
[ ] group-global        : TAB access-specifier FROZEN data-type ID ASSIGN expression
                        : TAB access-specifier data-type ID (ASSIGN expression)? NEWLINE+
                        : TAB access-specifier func-def

[ ] group-initializer   : TAB INITIALIZE func-params COLON NEWLINE+ statements

[ ] access-specifier    : VISIBLE|HIDDEN|RESTRICTED

[ ] statements          : TAB+ block statements*
                        
[ ] block               : init-stmt
                        : assign-stmt
                        : func-call
                        : global-stmt
                        : incase-stmt
                        : given-stmt
                        : every-stmt
                        : during-stmt
                        : go-during-stmt
                        : BACK expression? NEWLINE+
                        : STOP NEWLINE+
                        : SKIP NEWLINE+

[ ] init-stmt           : data-type ID ASSIGN expression NEWLINE+

[ ] assign-stmt         : variable-left ASSIGN expression NEWLINE+

[ ] func-call           : variable-left func-args NEWLINE+
                        : type-cast NEWLINE+

[ ] type-cast           : (NUM|DECI|WORD|LETTER|CHOICE) func-args

[ ] global-stmt         : GLOBAL ID NEWLINE+

[ ] incase-stmt         : INCASE expression COLON NEWLINE+ statements 
                        | TAB+ (UNLESS expression COLON NEWLINE+ statements)* 
                        | TAB+ (INSTEAD COLON NEWLINE+ statements)?

[ ] given-stmt          : GIVEN expression COLON NEWLINE+
                        | event-default

[ ] event-default       : default-block event-block*
                        : event-block+ (default-block event-block*)?

[ ] default-block       : TAB+ DEFAULT COLON NEWLINE+ statements

[ ] event-block         : TAB+ EVENT literals COLON NEWLINE+ statements

[ ] literals            : NUM_LIT|DECI_LIT|WORD_LIT|LETTER_LIT|YES|NO|BLANK

[ ] every-stmt          : EVERY data-type ID (COMMA data-type ID)? IN expression COLON NEWLINE+ statements

[ ] during-stmt         : DURING expression COLON NEWLINE+ statements

[ ] go-during-stmt      : GO COLON NEWLINE+ statements
                        | TAB+ DURING expression

[x] variable-left       : ID ((PERIOD ID) | (OBRACK expression (COLON expression)? CBRACK))*

[x] variable-right      : ID ((PERIOD ID) | (OBRACK expression (COLON expression)? CBRACK) | func-args)*

[x] expression          : [x] and-expr (OR and-expr)*
                        : [x] OBRACK (expression (COMMA expression)*)? CBRACK
                        : [x] OBRACE (expression COLON expression (COMMA expression COLON expression)*)? CBRACE

[x] and-expr            : [x] comp-expr (AND comp-expr)*

[x] comp-expr           : [x] NOT comp-expr
                        : [x] arith-expr ((EE|NE|LT|GT|LTE|GTE) arith-expr)*

[x] arith-expr          : [x] term ((PLUS|MINUS) term)*

[x] term                : [x] factor ((MUL|DIV|FLOOR|MOD) factor)*

[x] factor              : [x] NUM_LIT|DECI_LIT|WORD_LIT|LETTER_LIT|YES|NO|BLANK
                        : [x] variable-right
                        : [x] type-cast
                        : [x] MINUS (NUM_LIT|DECI_LIT|variable-right)
                        : [x] OPAR expression CPAR
                        : [x] NEW ID func-args