'''
! Rules revision:
    - can add default value (expression) to parameter using ASSIGN after ID
        - if using default value, the parameter must come after other parameters without default value

Notes:
    - single-block statements is required to end on NEWLINE+ unless the next token is EOF
    - multi-block statements don't end on NEWLINE+ because they will always contain a single-block statements that have a NEWLINE+ at the end
    - the end of a function body or group body is determined if the number of TAB in a statements is less than that of the previous statements

Legend:
    s   -> non-terminals (lowercase)
    S   -> terminals (uppercase)
    |   -> or
    ()  -> groups terminals and non-terminals together
    *   -> 0 or more
    +   -> 1 or more
    ?   -> optional
'''

##############################################################################################################################################

program             : NEWLINE* global* HOME OPAR CPAR COLON NEWLINE+ statements global* NEWLINE*

global              : init-stmt
                    : func-def
                    : group-def

func-def            : return-type ID OPAR parameter? CPAR COLON NEWLINE+ statements

group-def           : GROUP ID COLON NEWLINE+ group-body

data-type           : (NUM|DECI|WORD|LETTER|CHOICE|WIKI|ID) (OBRACK CBRACK)*

return-type         : EMPTY|data-type

parameter           : data-type ID (ASSIGN expression)? (COMMA data-type ID (ASSIGN expression)?)*

argument            : expression (COMMA expression)*

group-body          : initializer (group-global)*
                    : group-global+ (initializer group-global*)?
                    
group-global        : TAB access-specifier FROZEN data-type ID ASSIGN expression
                    : TAB access-specifier data-type ID (ASSIGN expression)? NEWLINE+
                    : TAB access-specifier func-def

initializer         : TAB INITIALIZE OPAR parameter? CPAR COLON NEWLINE+ statements

access-specifier    : VISIBLE|HIDDEN|RESTRICTED

statements          : TAB+ BACK expression NEWLINE+
                    : TAB+ STOP NEWLINE+ statements*
                    : TAB+ SKIP NEWLINE+ statements*
                    : TAB+ init-stmt statements*
                    : TAB+ assign-stmt statements*
                    : TAB+ func-call statements*
                    : TAB+ global-stmt statements*
                    : TAB+ incase-stmt statements*
                    : TAB+ given-stmt statements*
                    : TAB+ every-stmt statements*
                    : TAB+ during-stmt statements*
                    : TAB+ go-during-stmt statements*

init-stmt           : data-type ID ASSIGN expression NEWLINE+

assign-stmt         : dot-exp ASSIGN expression NEWLINE+

func-call           : dot-exp OPAR argument? CPAR NEWLINE+

global-stmt         : GLOBAL ID NEWLINE+

incase-stmt         : INCASE expression COLON NEWLINE+ statements 
                    | TAB+ (UNLESS expression COLON NEWLINE+ statements)* 
                    | TAB+ (INSTEAD COLON NEWLINE+ statements)?

given-stmt          : GIVEN expression COLON NEWLINE+
                    | event-default

event-default       : default-block event-block*
                    : event-block+ (default-block event-block*)?

default-block       : TAB+ DEFAULT COLON NEWLINE+ statements

event-block         : TAB+ EVENT literals COLON NEWLINE+ statements

literals            : NUM_LIT|DECI_LIT|WORD_LIT|LETTER_LIT|YES|NO|BLANK

every-stmt          : EVERY data-type ID (COMMA data-type ID)? IN expression COLON NEWLINE+ statements

during-stmt         : DURING expression COLON NEWLINE+ statements

go-during-stmt      : GO COLON NEWLINE+ statements
                    | TAB+ DURING expression

dot-exp             : ID (PERIOD ID)*

expression          : and-expr (OR and-expr)*
                    : OBRACK (expression (COMMA expression)*)? CBRACK
                    : OBRACE (key COLON expression (COMMA key COLON expression)*)? CBRACE

key                 : NUM_LIT|DECI_LIT|WORD_LIT|LETTER_LIT|YES|NO

and-expr            : comp-expr (AND comp-expr)*

comp-expr           : NOT comp-expr
                    : arith-expr ((EE|NE|LT|GT|LTE|GTE) arith-expr)*

arith-expr          : term ((PLUS|MINUS) term)*

term                : factor ((MUL|DIV|FLOOR|MOD) factor)*

factor              : NUM_LIT|DECI_LIT|WORD_LIT|LETTER_LIT|YES|NO|BLANK
                    : dot-exp (OPAR (expression (COMMA expression)*)? CPAR)?
                    : MINUS (NUM_LIT|DECI_LIT)
                    : OPAR expression CPAR