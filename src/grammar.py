from .tokens import TokenType

CFG = {
    "<program>": [
        [
            "<global>",
            TokenType.HOME,
            TokenType.OPAR,
            TokenType.CPAR,
            TokenType.COLON,
            "<newline>",
            "<code_block>",
            "<global>",
        ],
    ],
    "<global>": [
        [
            "<global1>",
            "<next_global>",
        ],
        [
            None,
        ],
    ],
    "<global1>": [
        [
            TokenType.FROZEN,
            "<data_type>",
            TokenType.IDENTIFIER,
            TokenType.ASSIGN,
            "<value>",
            "<newline>",
        ],
        [
            "<data_type>",
            TokenType.IDENTIFIER,
            "<func_or_var_init>",
        ],
        [
            TokenType.EMPTY,
            TokenType.IDENTIFIER,
            TokenType.OPAR,
            "<parameter>",
            TokenType.CPAR,
            TokenType.COLON,
            "<newline>",
            "<code_block>",
        ],
        [
            "<group>",
        ],
    ],
    "<func_or_var_init>": [
        [
            TokenType.ASSIGN,
            "<value>",
            "<newline>",
        ],
        [
            TokenType.OPAR,
            "<parameter>",
            TokenType.CPAR,
            TokenType.COLON,
            "<newline>",
            "<code_block>",
        ],
    ],
    "<next_global>": [
        [
            "<global>",
        ],
    ],
    "<code_block>": [
        [
            "<tab>",
            "<statement>",
            "<next_code_block>",
        ],
    ],
    "<next_code_block>": [
        [
            "<code_block>",
        ],
        [
            None,
        ],
    ],
    "<return_type>": [
        [
            "<data_type>",
        ],
        [
            TokenType.EMPTY,
        ],
    ],
    "<data_type>": [
        [
            TokenType.WORD,
            "<collection_suffix>",
        ],
        [
            TokenType.NUM,
            "<collection_suffix>",
        ],
        [
            TokenType.DECI,
            "<collection_suffix>",
        ],
        [
            TokenType.CHOICE,
            "<collection_suffix>",
        ],
        [
            TokenType.IDENTIFIER,
            "<collection_suffix>",
        ],
    ],
    "<collection_suffix>": [
        [
            TokenType.OBRACK,
            "<collection_index>",
            TokenType.CBRACK,
        ],
        [
            None,
        ],
    ],
    "<collection_index>": [
        [TokenType.NUM_LITERAL],
        [
            "<func_or_var>",
        ],
    ],
    "<parameter>": [
        [
            "<data_type>",
            TokenType.IDENTIFIER,
            "<next_parameter>",
        ],
        [
            None,
        ],
    ],
    "<next_parameter>": [
        [
            TokenType.COMMA,
            "<parameter>",
        ],
        [
            None,
        ],
    ],
    "<group>": [
        [
            TokenType.GROUP,
            TokenType.IDENTIFIER,
            "<inheritance>",
            TokenType.COLON,
            "<newline>",
            "<group_body>",
        ]
    ],
    "<inheritance>": [
        [
            TokenType.INHERITS,
            TokenType.IDENTIFIER,
        ],
        [
            None,
        ],
    ],
    "<group_body>": [
        [
            "<tab>",
            "<group_body1>",
        ],
    ],
    "<group_body1>": [
        [
            "<group_global>",
            "<optional_initializer>",
        ],
        [
            "<initializer>",
            "<next_group_global>",
        ],
    ],
    "<optional_initializer>": [
        [
            "<initializer>",
            "<next_group_global>",
        ],
        [
            None,
        ],
    ],
    "<group_global>": [
        [
            "<access_specifier>",
            "<group_global1>",
            "<next_group_global>",
        ],
    ],
    "<group_global1>": [
        [
            "<data_type>",
            TokenType.IDENTIFIER,
            "<func_or_field_init>",
        ],
        [
            TokenType.FROZEN,
            "<data_type>",
            TokenType.IDENTIFIER,
            TokenType.ASSIGN,
            "<value>",
            "<newline>",
        ],
    ],
    "<func_or_field_init>": [
        [
            "<field_value>",
        ],
        [
            TokenType.OPAR,
            "<parameter>",
            TokenType.CPAR,
            TokenType.COLON,
            "<newline>",
            "<code_block>",
        ],
    ],
    "<next_group_global>": [
        [
            "<group_global>",
        ],
        [
            None,
        ],
    ],
    "<initializer>": [
        [
            TokenType.INITIALIZE,
            TokenType.OPAR,
            "<parameter>",
            TokenType.CPAR,
            TokenType.COLON,
            "<newline>",
            "<code_block>",
        ],
    ],
    "<field_value>": [
        [
            TokenType.ASSIGN,
            "<value>",
            "<newline>",
        ],
        [
            None,
        ],
    ],
    "<access_specifier>": [
        [
            TokenType.VISIBLE,
        ],
        [
            TokenType.HIDDEN,
        ],
        [
            TokenType.RESTRICTED,
        ],
    ],
    "<expression>": [
        [
            "<condition>",
        ],
    ],
    "<condition>": [
        ["<condition1>", "<next_or>"],
    ],
    "<next_or>": [
        [
            TokenType.OR,
            "<condition>",
        ],
        [
            None,
        ],
    ],
    "<condition1>": [
        [
            "<condition_operand>",
            "<next_and>",
        ],
    ],
    "<next_and>": [
        [TokenType.AND, "<condition1>"],
        [
            None,
        ],
    ],
    "<condition_operand>": [
        [TokenType.NOT, "<condition_operand>"],
        [
            TokenType.YES,
        ],
        [
            TokenType.NO,
        ],
        [
            "<comparison>",
        ],
        [
            TokenType.OPAR,
            "<condition>",
            TokenType.CPAR,
        ],
    ],
    "<comparison>": [
        [
            "<sum>",
            "<comparison_operand>",
        ],
    ],
    "<comparison_operand>": [
        [
            "<comparison_operator>",
            "<sum>",
        ],
        [
            None,
        ],
    ],
    "<comparison_operator>": [
        [
            TokenType.LESS_THAN,
        ],
        [
            TokenType.LESS_THAN_EQUAL,
        ],
        [
            TokenType.GREATER_THAN,
        ],
        [
            TokenType.GREATER_THAN_EQUAL,
        ],
        [
            TokenType.NOT_EQUAL,
        ],
        [
            TokenType.EQUAL_TO,
        ],
    ],
    "<sum>": [
        [
            "<sum_operand>",
            "<next_term>",
        ],
    ],
    "<sum_operand>": [
        [
            "<term>",
        ],
        [
            TokenType.WORD_LITERAL,
        ],
    ],
    "<next_term>": [
        ["<term_operator>", "<sum>"],
        [
            None,
        ],
    ],
    "<term_operator>": [
        [
            TokenType.PLUS,
        ],
        [
            TokenType.MINUS,
        ],
    ],
    "<term>": [
        [
            "<factor>",
            "<next_factor>",
        ],
    ],
    "<next_factor>": [
        ["<factor_operator>", "<term>"],
        [
            None,
        ],
    ],
    "<factor_operator>": [
        [
            TokenType.MULTIPLY,
        ],
        [
            TokenType.DIVIDE,
        ],
        [
            TokenType.FLOOR,
        ],
        [
            TokenType.MODULO,
        ],
    ],
    "<factor>": [
        [
            "<operand>",
            "<exponentiation>",
        ],
    ],
    "<exponentiation>": [
        [TokenType.POWER, "<factor>"],
        [
            None,
        ],
    ],
    "<operand>": [
        [
            "<numeric>",
        ],
        [
            TokenType.MINUS,
            "<numeric>",
        ],
        [
            "<func_or_var>",
        ],
        [
            TokenType.OPAR,
            "<arithmetic_expression>",
            TokenType.CPAR,
        ],
    ],
    "<numeric>": [
        [
            TokenType.NUM_LITERAL,
        ],
        [
            TokenType.DECI_LITERAL,
        ],
    ],
    "<statement>": [
        [
            "<assign_stmt>",
        ],
        [
            TokenType.FROZEN,
            "<data_type>",
            TokenType.IDENTIFIER,
            TokenType.ASSIGN,
            "<value>",
            "<newline>",
        ],
        [
            "<data_type>",
            TokenType.IDENTIFIER,
            TokenType.ASSIGN,
            "<value>",
            "<newline>",
        ],
        [
            TokenType.INCASE,
            "<expression>",
            TokenType.COLON,
            "<newline>",
            "<code_block>",
            "<unless>",
            "<instead>",
        ],
        [
            TokenType.GIVEN,
            "<func_or_var>",
            TokenType.COLON,
            "<newline>",
            "<event>",
            "<default>",
        ],
        [
            TokenType.EVERY,
            "<data_type>",
            TokenType.IDENTIFIER,
            TokenType.IN,
            "<iterable>",
            TokenType.COLON,
            "<newline>",
            "<code_block>",
        ],
        [
            TokenType.DURING,
            "<expression>",
            TokenType.COLON,
            "<newline>",
            "<code_block>",
        ],
        [
            TokenType.GO,
            TokenType.COLON,
            "<newline>",
            "<code_block>",
            "<tab>",
            TokenType.DURING,
            "<expression>",
            "<newline>",
        ],
        [
            TokenType.BACK,
            "<expression>",
            "<newline>",
        ],
        [
            TokenType.GLOBAL,
            TokenType.IDENTIFIER,
            "<newline>",
        ],
        [
            TokenType.STOP,
            "<newline>",
        ],
        [
            TokenType.SKIP,
            "<newline>",
        ],
    ],
    "<assign_stmt>": [
        [
            "<object>",
            "<assign_stmt1>",
        ],
        [
            "<assign_stmt2>",
        ],
    ],
    "<assign_stmt1>": [
        [
            TokenType.PERIOD,
            "<assign_stmt2>",
        ],
        [
            "<assign_stmt3>",
        ],
    ],
    "<assign_stmt2>": [
        [
            TokenType.IDENTIFIER,
            "<assign_stmt1>",
        ],
    ],
    "<assign_stmt3>": [
        [
            TokenType.OBRACK,
            TokenType.NUM_LITERAL,
            "<assign_stmt4>",
            TokenType.CBRACK,
            "<assign_stmt5>",
        ],
        [
            "<assign_stmt6>",
        ],
    ],
    "<assign_stmt4>": [
        [
            TokenType.COLON,
            TokenType.NUM_LITERAL,
        ],
        [
            None,
        ],
    ],
    "<assign_stmt5>": [
        [TokenType.PERIOD, TokenType.IDENTIFIER, "<assign_stmt8>"],
        [
            "<assign_operator>",
            "<value>",
            "<newline>",
        ],
    ],
    "<assign_stmt6>": [
        [
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
            "<assign_stmt7>",
        ],
    ],
    "<assign_stmt7>": [
        [
            TokenType.PERIOD,
            TokenType.IDENTIFIER,
            "<assign_stmt6>",
        ],
        [
            None,
        ],
    ],
    "<assign_stmt8>": [
        [
            "<assign_stmt5>",
        ],
        [
            "<assign_stmt6>",
        ],
    ],
    "<assign_operator>": [
        [
            TokenType.ASSIGN,
        ],
        [
            TokenType.PLUS_ASSIGN,
        ],
        [
            TokenType.MINUS_ASSIGN,
        ],
        [
            TokenType.MULTIPLY_ASSIGN,
        ],
        [
            TokenType.DIVIDE_ASSIGN,
        ],
        [
            TokenType.FLOOR_ASSIGN,
        ],
        [
            TokenType.POWER_ASSIGN,
        ],
        [
            TokenType.MODULO_ASSIGN,
        ],
    ],
    "<unless>": [
        [
            "<tab>",
            TokenType.UNLESS,
            "<expression>",
            TokenType.COLON,
            "<newline>",
            "<code_block>",
            "<next_unless>",
        ],
        [
            None,
        ],
    ],
    "<next_unless>": [
        [
            "<unless>",
        ],
        [
            None,
        ],
    ],
    "<instead>": [
        [
            "<tab>",
            TokenType.INSTEAD,
            TokenType.COLON,
            "<newline>",
            "<code_block>",
        ],
        [
            None,
        ],
    ],
    "<default>": [
        [
            "<tab>",
            TokenType.DEFAULT,
            TokenType.COLON,
            "<newline>",
            "<code_block>",
        ],
        [
            None,
        ],
    ],
    "<event>": [
        [
            "<tab>",
            TokenType.EVENT,
            "<event_value>",
            TokenType.COLON,
            "<newline>",
            "<code_block>",
            "<next_event>",
        ],
    ],
    "<event_value>": [
        [
            TokenType.WORD_LITERAL,
        ],
        [TokenType.NUM_LITERAL],
        [
            TokenType.DECI_LITERAL,
        ],
    ],
    "<next_event>": [
        [
            "<event>",
        ],
        [
            None,
        ],
    ],
    "<iterable>": [
        [
            "<collection_value>",
        ],
        [
            "<func_or_var>",
        ],
    ],
    "<func_or_var>": [
        [
            "<normal_func_or_var>",
        ],
        [
            "<predefined_func>",
        ],
        [
            "<object>",
            "<func_or_var_tail>",
        ],
    ],
    "<normal_func_or_var>": [
        [
            TokenType.IDENTIFIER,
            "<func_suffix>",
            "<splice_suffix>",
            "<func_or_var_tail>",
        ],
        [
            "<collection_func>",
        ],
    ],
    "<func_or_var_tail>": [
        [
            TokenType.PERIOD,
            "<normal_func_or_var>",
        ],
        [
            None,
        ],
    ],
    "<func_suffix>": [
        [
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
        ],
        [
            None,
        ],
    ],
    "<predefined_func>": [
        [
            TokenType.RANGE,
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
        ],
        [
            TokenType.INP,
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
        ],
        [
            TokenType.OUT,
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
        ],
        [
            TokenType.WORD,
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
        ],
        [
            TokenType.NUM,
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
        ],
        [
            TokenType.DECI,
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
        ],
    ],
    "<collection_func>": [
        [
            TokenType.COL_ADD,
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
        ],
        [
            TokenType.COL_DELETE,
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
        ],
        [
            TokenType.COL_DELETE_AT,
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
        ],
    ],
    "<splice_suffix>": [
        [
            TokenType.OBRACK,
            TokenType.NUM_LITERAL,
            "<splice>",
            TokenType.CBRACK,
        ],
        [
            None,
        ],
    ],
    "<splice>": [
        [
            TokenType.COLON,
            TokenType.NUM_LITERAL,
        ],
        [
            None,
        ],
    ],
    "<object>": [
        [
            TokenType.PARENT,
        ],
        [
            TokenType.SELF,
        ],
    ],
    "<value>": [
        [
            "<expression>",
        ],
        [
            "<collection_value>",
        ],
        [
            "<wiki_value>",
        ],
        [
            TokenType.NEW,
            TokenType.IDENTIFIER,
            TokenType.OPAR,
            "<argument>",
            TokenType.CPAR,
        ],
    ],
    "<collection_value>": [
        [
            TokenType.OBRACK,
            "<opt_newline_tab>",
            "<value>",
            "<next_item>",
            "<opt_newline_tab>",
            TokenType.CBRACK,
        ],
    ],
    "<next_item>": [
        [
            TokenType.COMMA,
            "<opt_newline_tab>",
            "<expression>",
            "<next_item>",
        ],
        [
            None,
        ],
    ],
    "<wiki_value>": [
        [
            TokenType.OBRACE,
            "<opt_newline_tab>",
            TokenType.WORD_LITERAL,
            TokenType.COLON,
            "<value>",
            "<next_pair>",
            "<opt_newline_tab>",
            TokenType.CBRACE,
        ],
    ],
    "<next_pair>": [
        [
            TokenType.COMMA,
            "<opt_newline_tab>",
            TokenType.WORD_LITERAL,
            TokenType.COLON,
            "<expression>",
            "<next_pair>",
        ],
        [
            None,
        ],
    ],
    "<argument>": [
        [
            "<expression>",
            "<next_argument>",
        ],
        [
            None,
        ],
    ],
    "<next_argument>": [
        [
            TokenType.COMMA,
            "<argument>",
        ],
        [
            None,
        ],
    ],
    "<newline>": [
        [
            TokenType.NEWLINE,
            "<next_newline>",
        ],
        [
            TokenType.EOF,
        ],
    ],
    "<next_newline>": [
        [
            TokenType.NEWLINE,
            "<next_newline>",
        ],
        [
            None,
        ],
    ],
    "<tab>": [
        [
            TokenType.TAB,
            "<next_tab>",
        ],
    ],
    "<next_tab>": [
        [
            "<tab>",
        ],
        [
            None,
        ],
    ],
    "<opt_newline_tab>": [
        [
            TokenType.NEWLINE,
            "<tab>",
        ],
        [
            None,
        ],
    ],
}
